In Eclipse:
File > New > Other > Maven Project
Next > Next
In the view “New Maven project”, search for “jfx” in the filter box and select the row with values:
“Org.openjfx” as Group Id, “javafx-archetype-simple” as Artifact Id
Click Next, set Group Id and Artifact Id as you like. Click Finish
Now you should have your Maven project with JavaFX

To add JUnit testing:
Right click the folder “src” and add another folder called “test”, which should be on the same hierarchical level as the folder “main”. Add another folder inside the folder “test”, called “java”.
Go to the file App.java and mark the keyword for the class “App”, and click ctrl+1, to bring up the option to create a new JUnit test case for the class App. Create the new test case and add JUnit 5 to the build path when prompted. 
Move the new test class to the folder "test", but add it to the same package as the class that is to be tested, as per this link: https://stackoverflow.com/questions/2388253/separation-of-junit-classes-into-special-test-package
Use this framework/package to test the JavaFX GUI: https://github.com/TestFX/TestFX

Add the following dependencies to the pom.xml file: 
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>5.5.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>testfx-junit5</artifactId>
			<version>4.0.16-alpha</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest</artifactId>
			<version>2.1</version>
			<scope>test</scope>
		</dependency>

Right click the project > Maven > Update project > OK
Add the following imports to the class AppTest.java:
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.testfx.api.FxAssert;
import org.testfx.api.FxRobot;
import org.testfx.framework.junit5.ApplicationExtension;
import org.testfx.framework.junit5.Start;
import org.testfx.matcher.control.LabeledMatchers;

import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

Replace the default AppTest class with this class:
@ExtendWith(ApplicationExtension.class)
class AppTest {

    private Button button;

    /**
     * Will be called with {@code @Before} semantics, i. e. before each test method.
     *
     * @param stage - Will be injected by the test runner.
     */
    @Start
    private void start(Stage stage) {
        button = new Button("click me!");
        button.setId("myButton");
        button.setOnAction(actionEvent -> button.setText("clicked!"));
        stage.setScene(new Scene(new StackPane(button), 100, 100));
        stage.show();
    }

    /**
     * @param robot - Will be injected by the test runner.
     */
    @Test
    void should_contain_button_with_text(FxRobot robot) {
        FxAssert.verifyThat(button, LabeledMatchers.hasText("click me!"));
        // or (lookup by css id):
        FxAssert.verifyThat("#myButton", LabeledMatchers.hasText("click me!"));
        // or (lookup by css class):
        FxAssert.verifyThat(".button", LabeledMatchers.hasText("click me!"));
    }

    /**
     * @param robot - Will be injected by the test runner.
     */
    @Test
    void when_button_is_clicked_text_changes(FxRobot robot) {
        // when:
        robot.clickOn(".button");

        // then:
        FxAssert.verifyThat(button, LabeledMatchers.hasText("clicked!"));
        // or (lookup by css id):
        FxAssert.verifyThat("#myButton", LabeledMatchers.hasText("clicked!"));
        // or (lookup by css class):
        FxAssert.verifyThat(".button", LabeledMatchers.hasText("clicked!"));
    }

Add the following line to the file module-info.java:
requires javafx.graphics;

Update the Maven project again. 
Create an empty file in the package for the application called application.css that is empty. 

Go to “Run as…” > “Run configurations” > “Arguments” > VM arguments. Add this line:
--add-exports javafx.graphics/com.sun.javafx.application=ALL-UNNAMED
As per this link: https://github.com/TestFX/TestFX/issues/638
Apply, run. The test cases should run without errors. 
